#!/bin/sh

# PRE-COMMIT HOOK
#
# The pre-commit hook is invoked before a Subversion txn is
# committed.  Subversion runs this hook by invoking a program
# (script, executable, binary, etc.) named 'pre-commit' (for which
# this file is a template), with the following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] TXN-NAME     (the name of the txn about to be committed)
#
#   [STDIN] LOCK-TOKENS ** the lock tokens are passed via STDIN.
#
#   If STDIN contains the line "LOCK-TOKENS:\n" (the "\n" denotes a
#   single newline), the lines following it are the lock tokens for
#   this commit.  The end of the list is marked by a line containing
#   only a newline character.
#
#   Each lock token line consists of a URI-escaped path, followed
#   by the separator character '|', followed by the lock token string,
#   followed by a newline.
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# If the hook program exits with success, the txn is committed; but
# if it exits with failure (non-zero), the txn is aborted, no commit
# takes place, and STDERR is returned to the client.   The hook
# program can use the 'svnlook' utility to help it examine the txn.
#
# On a Unix system, the normal procedure is to have 'pre-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
#   ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#   ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#
#   This is why we recommend using the read-only 'svnlook' utility.
#   In the future, Subversion may enforce the rule that pre-commit
#   hooks should not modify the versioned data in txns, or else come
#   up with a mechanism to make it safe to do so (by informing the
#   committing client of the changes).  However, right now neither
#   mechanism is implemented, so hook writers just have to be careful.
#
# Note that 'pre-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'pre-commit.bat' or 'pre-commit.exe',
# but the basic idea is the same.
#
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
#
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# /usr/share/subversion/hook-scripts, and in the repository at
# http://svn.apache.org/repos/asf/subversion/trunk/tools/hook-scripts/ and
# http://svn.apache.org/repos/asf/subversion/trunk/contrib/hook-scripts/

# Changes by Maddes:
# * based on "pre-commit.tmpl" of Subversion 1.6.12
# * do all tests and count errors in RC_ALL, then exit at the end accordingly
#   therefore no `set -e`

REPOS="${1}"
TXN="${2}"

SVNLOOK=/usr/bin/svnlook
GREP=/bin/grep

RC_ALL=0

# Empty line into error log
printf "\n" 1>&2

# Make sure that the log message contains some text.
"${SVNLOOK}" log -t "${TXN}" "${REPOS}" | \
   "${GREP}" -e "[a-zA-Z0-9]" > /dev/null || { RC_ALL="$(( ${RC_ALL} + 1))"; printf "${0}:\nLog message empty!!!\n\n" 1>&2; }

# Exit on all errors.
#set -e

# Check that the author of this commit has the rights to perform
# the commit on the files and directories being modified.
#"${REPOS}"/hooks/commit-access-control.pl "${REPOS}" ${TXN} \
#  "${REPOS}"/hooks/commit-access-control.cfg || { RC_ALL="$(( ${RC_ALL} + 1))"; printf "${0}:\nNo permission for committing these files!!!\n\n" 1>&2; }

# Check MIME types
#/usr/share/subversion/hook-scripts/check-mime-type.pl "${REPOS}" "${TXN}" || { RC_ALL="$(( ${RC_ALL} + 1))"; printf "\n" 1>&2; }
/usr/lib64/subversion/contrib/hook-scripts/check-mime-type.pl "${REPOS}" "${TXN}" || { RC_ALL="$(( ${RC_ALL} + 1))"; printf "\n" 1>&2; }

# Check case of all names
#/usr/share/subversion/hook-scripts/case-insensitive.py "${REPOS}" "${TXN}" || { RC_ALL="$(( ${RC_ALL} + 1))"; printf "\n" 1>&2; }
/usr/lib64/subversion/contrib/hook-scripts/case-insensitive.py "${REPOS}" "${TXN}" || { RC_ALL="$(( ${RC_ALL} + 1))"; printf "\n" 1>&2; }

# Check forgotten conflicts
# We scan through the transaction diff, looking for things that look
# like conflict markers.  If we find one, we abort the commit.
SUSPICIOUS=$("${SVNLOOK}" diff -t "${TXN}" "${REPOS}" | "${GREP}" -E -e '^\+(<{7} \.|={7}$|>{7} \.)' | wc -l)
if [ ${SUSPICIOUS} -ne 0 ]; then
  RC_ALL="$(( ${RC_ALL} + 1))"
  echo 'Some parts of your commit look suspiciously like merge' 1>&2
  echo 'conflict markers.  Please double-check your diff and try' 1>&2
  echo 'committing again.' 1>&2
  printf "\n" 1>&2
fi

# All checks passed, so allow the commit.
echo "All checks done. RC=${RC_ALL}." 1>&2

# Enable next line when testing
#RC_ALL=999

exit ${RC_ALL}
